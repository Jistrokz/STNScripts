###################################
##   Cipher Suite Check Script   ##
###################################
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process

##Supporting documents
$scriptFolder = ".\"
$cscuFolder = $scriptFolder + "CSCU Data"
New-Item -ItemType Directory -Path $cscuFolder -ErrorAction SilentlyContinue | Out-Null
$supportedCipherSuites = $cscuFolder + "\SupportedCipherSuites.csv"
$gpoCipherSuites = $cscuFolder + "\GPOCipherSuites.csv"
$localCipherSuites = $cscuFolder + "\LocalCipherSuites.csv"
$commonCipherSuites = $cscuFolder + "\CommonCipherSuites.csv"
$hotfixFile = $cscuFolder + "\HotfixList.csv"
$gpResultOutput = $cscuFolder + "\gpresult.xml"
$wmiLog = $cscuFolder + "\wmiLog.txt"
$cscuLog = $cscuFolder + "\csculog.log"
$commonCiphersExist = Test-Path -Path $commonCipherSuites


##Pull and Build required data

$dateTime = Get-Date -f 'MM-dd-yyyy HH:mm:ss'
$osKeyValue = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name ProductName).ProductName
$osBuild =  (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name CurrentBuildNumber).CurrentBuildNumber
$hotfixList = @(Get-HotFix)
$gpoKeyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002"
$gpoKeyCheck = (Get-ItemProperty -LiteralPath $gpoKeyPath -Name Functions -ErrorAction silentlycontinue)
$dhCheck = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\KeyExchangeAlgorithms\Diffie-Helman" -Name Enabled -ErrorAction SilentlyContinue).Enabled

#################################################################################################################    
##Determine Active Cipher Suite location and pull the list from there
##Generate Supported Cipher Suites text file and add list of cipher suites
##If you need to check for different Cipher Suites,you must update the Supported Cipher Suites in the Set-Content
#################################################################################################################

if ($gpoKeyCheck -ne $null) 
    {
        $cipherKeyValue = (Get-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002 -Name Functions).Functions
        $systemCipherSuites = $gpoCipherSuites
        $cipherSuites = $cipherKeyValue
        $cipherSource = "GPO Location Review GPResult Data section for details."
        $gpresultMsg = "Secure Communication is configured through Local or Domain Group Policy (GPO) on this machine.
Please review GPResult Data below or the gpresults.htm file generated by the Cipher Suite Check Utility to see if Cypher Suites are currently being managed by GPO.
GPO Managed Cipher Suites must be changed in the GPO Settings then restart system."
        Write-Host $cipherSource
        Set-Content -Path $systemCipherSuites -Value $cipherSuites
    }
else 
    {
        $cipherKeyValue = (Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Cryptography\Configuration\Local\SSL\00010002 -Name Functions).Functions
        $systemCipherSuites = $localCipherSuites
        $cipherSuites = $cipherKeyValue
        $cipherSource = "Local System Location"
        $localSourceMsg = "Add supported Cipher Suites to HKLM:\SYSTEM\CurrentControlSet\Control\Cryptography\Configuration\Local\SSL\00010002 and restart"
        $gpresultMsg = ""
        Write-Host $cipherSource
        Set-Content -Path $systemCipherSuites -Value $cipherSuites
    }



###################################
##OS Supported by Legacy Plus Agent
###################################

$legacyPlus = {
                ## Server specific Script Blocks ##

#################################################################################################################
##Check OS Updates before checking Cipher Suites... 
##OS Update Requirements must be met before proper Cipher Suites come into play.
##Updates used are a combonation of updates listed in our System Requirements and Cipher Suite Troubleshooting KB
#################################################################################################################

                $2k8Win7 = {
                ##Check if Server 2008R2 SP1 or Windows 7 SP1 and if Required updates are installed
                $csdValue = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name CSDVersion).CSDVersion

                if ($csdValue -notlike "Service Pack 1")
                    {
                        Write-Host "You must install Service Pack 1 to be supported"
                        Exit
                    }
                ##Continuing after passing SP1 Validation
                Write-Host "This is Windows Server 2008 R2 SP1"
                

                if ($hotfixList -like "*KB4457144*")
                    {
                        Set-Content -Path $hotfixFile -Value "KB4457144 is Installed"
                    }
                Else
                    {
                        Set-Content -Path $hotfixFile -Value "KB4457144 is not Installed"
                    }
                if ($hotfixList -like "*KB4490628*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB4490628 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB4490628 is not Installed"
                    }
                if ($hotfixList -like "*KB3042058*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB3042058 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB3042058 is not Installed and is needed to update the default TLS Cipher Suites"
                    } 
                if ($hotfixList -like "*KB3140245*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB3140245 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB3140245 is not Installed and is required to enable TLS 1.2"
                    }
                if ($hotfixList -like "*KB2864202*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB2864202 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB2864202 is not Installed"
                    }
                if ($hotfixList -like "*KB3020369*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB3020369 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB3020369 is not Installed"
                    }
                if ($hotfixList -like "*KB5022661*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB5022661 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB5022661 is not Installed"
                    }
                if ($hotfixList -like "*KB3033929*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB3033929 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB3033929 is not Installed and is needed for SHA2 support"
                    } 
Set-Content $supportedCipherSuites -Value "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA"

                ## Compare Supported Manager Cipher Suites between Manager and Client ##
                Remove-Item -Path $commonCipherSuites
                  
                                   
                Get-Content $supportedCipherSuites | ForEach-Object {
                        $supportedCipherSuites_Line = $_
                        Get-Content $systemCipherSuites | Where-Object {$_.Contains($supportedCipherSuites_Line)} | Out-File -FilePath $commonCipherSuites -Append
                    }                                 
           }
                $server2012 = {
                Write-Host "This is Windows Server 2012"
                

                if ($hotfixList -like "*KB3003729*")
                    {
                        Set-Content -Path $hotfixFile -Value "KB3003729 is Installed"
                    }
                Else
                    {
                        Set-Content -Path $hotfixFile -Value "KB3003729 is not Installed"
                    }
                if ($hotfixList -like "*KB3042058*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB3042058 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB3042058 is not Installed"
                    }
                if ($hotfixList -like "*KB3140245*")
                    {
                        Add-Content -Path $hotfixFile -Value "KB3140245 is Installed"
                    }
                Else
                    {
                        Add-Content -Path $hotfixFile -Value "KB3140245 is not Installed and is required to enable TLS 1.2"
                    }
Set-Content $supportedCipherSuites -Value "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA"

                ## Compare Supported Manager Cipher Suites between Manager and Client ##
                Remove-Item -Path $commonCipherSuites
                  
                                   
                Get-Content $supportedCipherSuites | ForEach-Object {
                        $supportedCipherSuites_Line = $_
                        Get-Content $systemCipherSuites | Where-Object {$_.Contains($supportedCipherSuites_Line)} | Out-File -FilePath $commonCipherSuites -Append
                    }                    

              }

                ## Check if Windows Server 2008 R2 SP1/Windows 7 SP1
                if ($osKeyValue -like "*Server 2008 R2*" -or $osKeyValue -like "*Windows 7*")
                    {
                        .$2k8Win7
                    }

                ##Check if Windows Server 2012 and if Required Updates are installed

                if ($osKeyValue -like "Windows Server 2012*")
                    {
                        .$server2012
                    }

## How many Common Cipher Suites were found?
$countCiphers = Get-Content -Path $commonCipherSuites | Measure-Object -Line
$count = $countCiphers | Select-Object -ExpandProperty Lines

Write-Host "Cipher Suite comparison complete `n
There were " $count "Cipher Suites loaded that are supported by the manager and Operating System. `n"
Write-Host "Please review the CommonCipherSuites.csv file. `n
Make sure at least 1 of the Cipher Suites listed are at the top of the list in SystemCipherSuites.txt."

############################################################
######Determine whether Diffie-Helman is Enabled or Disabled and the configured Key Length
############################################################
if ($dhCheck -ne 0)
    {   
        $dhStatus = "Enabled"
    }
else
    {
        $dhStatus = "Disabled"
    }

##########################################################################
#########Output GPResult Report on OS which Powershell Supports the cmdlet
##########################################################################
Write-Host "Running gpresult to check computer GPO Information"
Invoke-command -ScriptBlock {gpresult.exe /scope computer /f /x $gpResultOutput}

# Load the XML content from the file
$xmlFilePath = $gpResultOutput
$xmlContent = Get-Content -Path $xmlFilePath

# Create an XML object from the content
$xml  = [xml]$xmlContent

$ns = New-Object System.Xml.XmlNamespaceManager($xml.NameTable)
$ns.AddNamespace('default', 'http://www.microsoft.com/GroupPolicy/Settings/Base')
$ns.AddNamespace('q4', 'http://www.microsoft.com/GroupPolicy/Settings/Registry')
$ns.AddNamespace("types", "http://www.microsoft.com/GroupPolicy/Types")
$ns.AddNamespace("ns", "http://www.microsoft.com/GroupPolicy/Rsop")

$ahgpoCipherSuites = $xml.SelectSingleNode("//q4:Policy[q4:EditText[q4:Name='SSL Cipher Suites']]/q4:EditText/q4:Value", $ns).InnerText
#Write-Output "GPO CipherSuites: $ahgpoCipherSuites"
$gpoIdentifier = $xml.SelectSingleNode("//q4:Policy[q4:EditText[q4:Name='SSL Cipher Suites']]/default:GPO/types:Identifier", $ns).InnerText
#Write-Output "GPO Identifier: $gpoIdentifier"

if ($ahgpoCipherSuites -eq $null) 
    { Write-Output "No Cipher Suites GPO"}
else 
    {
	    Write-Output "GPO CipherSuites: $gpoCipherSuites"
	    $gpoIdentifier = $xml.SelectSingleNode("//q4:Policy[q4:EditText[q4:Name='SSL Cipher Suites']]/default:GPO/types:Identifier", $ns).InnerText
	    Write-Output "GPO Identifier: $gpoIdentifier"

        If ($gpoIdentifier -ne "LocalGPO")
            {
	            Write-Output "This is a Domain GPO"
	            # Extract GPO name and identifier
	            $gpoName = $xml.SelectSingleNode("//ns:GPO[ns:Path[types:Identifier='$gpoIdentifier']]/ns:Name", $ns).InnerText
	

	            # Output GPO name and identifier
	            #Write-Output "GPO Name: $gpoName"
            }
        Else 
            {
                $gpoName = "This is a local GPO"
	            #Write-Output "This is a local GPO"
            }
    }

###################################################################################################
########Test WMI Corruption by attempting to pull some of the data the agent pulls for registration
###################################################################################################
$wmiComputerSystem = Get-CimInstance -ClassName Win32_ComputerSystem
if ($wmiComputerSystem -eq $null)
    {
        Set-Content -Path $wmiLog -Value "There was an error pulling WMI Data. The repository may be corrupt"
    }
else
    {
        Set-Content -Path $wmiLog -Value $wmiComputerSystem
    }
$wmiOS = Get-CimInstance -ClassName Win32_OperatingSystem
if ($wmiOS -eq $null)
    {
        Add-Content -Path $wmiLog -Value "There was an error pulling WMI Data. The repository may be corrupt"
    }
else
    {
        Add-Content -Path $wmiLog -Value $wmiOS
    }
$wmiProcessor = Get-CimInstance -ClassName Win32_Processor
if ($wmiProcessor -eq $null)
    {
        Add-Content -Path $wmiLog -Value "There was an error pulling WMI Data. The repository may be corrupt"
    }
else
    {
        Add-Content -Path $wmiLog -Value $wmiProcessor
    }

#############################################################
######## Build Out of Cipher Suite Check Utility Log CSCU.log
#############################################################
$hostname = $env:computername
$hotfixes4Log = Get-Content -Path $hotfixFile -ErrorAction SilentlyContinue

#Are Updates Required?
if ($hotfixes4Log -ne $null)
    {
        $hotfixes4Log
    }
else
    {
        $hotfixes4Log = "There are no Windows Updates required by SentinelOne for this System"
    }

#Determine the message based on count of cipher suites in common
if ($count -eq 0)
    {
        $cipherMessage = "Because there are no Cipher Suites in common you must add at least 1 cipher suite listed in the SupportedCipherSuites.csv file to your $cipherSource"
    }
else
    {
        $cipherMessage = "Because there are Cipher Suites in common, make sure at least 1 cipher suite from the CommonCipherSuites.csv file is listed at the top of your $cipherSource"
    }

#Is there an Active GPO applied?
if ($sslCipherSuites -ne $null)
    {
        $gpresultMsg = "There is an Active GPO Policy applied to this system."
    }
else
    {
      
    }

################### csculog.log Text ##################
$logOutput = "Cipher Suite Check Utility Log $dateTime 
Hostname: $hostname
Operating System: $wmiOSName


-----------------------------------
Required Windows Update Status
---------------------------------------
$hotfixes4Log


-----------------------------------
Security Communication Requirements
---------------------------------------
Diffie-Hellman Status: $dhStatus
Cipher Suites Source: $cipherSource
$localSourceMsg

There are $count Cipher Suites listed that are supported by the manager and this Operating System.

$cipherMessage


-----------------------------------
WMI Data Query Results
---------------------------------------
$wmiComputerSystem
$wmiOS
$wmiProcessor


-----------------------------------
GPResult Data
---------------------------------------
$gpresultMsg

$gpoName

$ahgpoCipherSuites
"
}

###############################
##OS Supported by Current Agent
###############################

$currentAgent = {
                ## Server specific Script Blocks ##

#################################################################################################################
##Check OS Updates before checking Cipher Suites... 
##OS Update Requirements must be met before proper Cipher Suites come into play.
##Updates used are a combonation of updates listed in our System Requirements and Cipher Suite Troubleshooting KB
#################################################################################################################

                $server2012R2 = {
                Write-Host "This is Server 2012R2"
                    
                $consoleUrl = Read-Host -Prompt 'Console URL (Example: https://myconsole.sentinelone.net)'
                try {
                        $testConnect = Invoke-RestMethod -Uri $consoleUrl
                        if ($testConnect -ne $null)
                            {
                                $testConnStatus = "Connection Test Result: Success"
                            }
                        else
                            {
                                $testConnStatus = "Connection Test Result: Fail"
                            }
                    }
                catch
                    {
        
                    }

                Write-Host $testConnStatus
                
##Checking Required Windows Updates for Server 2012R2

                    if ($hotfixList -like "*KB3042058*")
                        {
                            Set-Content -Path $hotfixFile -Value "KB3042058 is Installed"
                        }
                    Else
                        {
                            Set-Content -Path $hotfixFile -Value "KB3042058 is not Installed"
                        }
                    if ($hotfixList -like "*KB2919442*")
                        {
                            Add-Content -Path $hotfixFile -Value "KB2919442 is Installed"
                        }
                    Else
                        {
                            Add-Content -Path $hotfixFile -Value "KB2919442 is not Installed"
                        }
                    if ($hotfixList -like "*KB5022661*")
                        {
                            Add-Content -Path $hotfixFile -Value "KB5022661 is Installed"
                        }
                    Else
                        {
                            Add-Content -Path $hotfixFile -Value "KB5022661 is not Installed and is required to support the Azure Code Signing program (Certs)."
                        }
                    if ($hotfixList -like "*KB2919355*")  ### This is a rollup of all the others and is all that is required for communication --  Setup If Statement to check this and end or if this does not exist check the others.
                        {
                            Add-Content -Path $hotfixFile -Value "Roll-up Update KB2919355 is Installed and contains the other required updates."
                        }
                    Else
                        {
                            Add-Content -Path $hotfixFile -Value "Roll-up Update KB2919355 is not Installed. `n So the following updates must be installed."
                                            
                            if ($hotfixList -like "*KB2932046*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2932046 is Installed"
                                }
                            Else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2932046 is not Installed"
                                }
                            if ($hotfixList -like "*KB2959977*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2959977 is Installed"
                                }
                            Else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2959977 is not Installed"
                                }
                            if ($hotfixList -like "*KB2937592*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2937592 is Installed"
                                }
                            Else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2937592 is not Installed"
                                }
                            if ($hotfixList -like "*KB2938439*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2938439 is Installed"
                                }
                            Else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2938439 is not Installed"
                                }
                            if ($hotfixList -like "*KB2934018*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2934018 is Installed"
                                }
                            Else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB2934018 is not Installed"
                                }                            
                            
                        }
                                                
Set-Content $supportedCipherSuites -Value "TLS_AES_256_GCM_SHA384 - TLS 1.3 Must be enabled to use this cipher suite
TLS_CHACHA20_POLY1305_SHA256 - TLS 1.3 Must be enabled to use this cipher suite
TLS_AES_128_GCM_SHA256 - TLS 1.3 Must be enabled to use this cipher suite
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CCM_8
TLS_DHE_RSA_WITH_AES_256_CCM
TLS_DHE_RSA_WITH_AES_128_CCM_8
TLS_DHE_RSA_WITH_AES_128_CCM
TLS_RSA_WITH_AES_256_CCM_8
TLS_RSA_WITH_AES_256_CCM
TLS_RSA_WITH_AES_128_CCM_8
TLS_RSA_WITH_AES_128_CCM
TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"

##Compare Supported Manager Cipher Suites and Cipher Suites loaded by the system##
                if ($commonCiphersExist)
                    {
                        Remove-Item -Path $commonCipherSuites
                    }
              
                Get-Content $supportedCipherSuites | ForEach-Object {
                        $supportedCipherSuites_Line = $_
                        Get-Content $systemCipherSuites | Where-Object {$_.Contains($supportedCipherSuites_Line)} | Out-File -FilePath $commonCipherSuites -Append
                            }
##Compare Supported Manager Cipher Suites and Cipher Suites loaded by the system##
                Remove-Item -Path $commonCipherSuites
              
                Get-Content $supportedCipherSuites | ForEach-Object {
                        $supportedCipherSuites_Line = $_
                        Get-Content $systemCipherSuites | Where-Object {$_.Contains($supportedCipherSuites_Line)} | Out-File -FilePath $commonCipherSuites -Append
                        }
                    }
                $win10serv2016 = {

                Write-Host "This is Windows 10 or Server 2016"

                $consoleUrl = Read-Host -Prompt 'Console URL (Example: https://myconsole.sentinelone.net)'
                try {
                        $testConnect = Invoke-RestMethod -Uri $consoleUrl
                        if ($testConnect -ne $null)
                            {
                                $testConnStatus = "Connection Test Result: Success"
                            }
                        else
                            {
                                $testConnStatus = "Connection Test Result: Fail"
                            }
                    }
                catch
                    {
        
                    }

                Write-Host $testConnStatus

##Check for Required Windows Updates Windows 10 or Server 2016


                    if ($hotfixList -like "*KB5043051*")  ### This is a rollup of all the others and is all that is required for communication --  Setup If Statement to check this and end or if this does not exist check the others.
                        {
                            Set-Content -Path $hotfixFile -Value "Roll-up Update KB5043051 is Installed and contains the other required updates."
                        }
                    Else
                        {
                            Set-Content -Path $hotfixFile -Value "Roll-up Update KB5043051 is not Installed. `n So the following updates must be installed."
                                            
                            if ($hotfixList -like "*KB4093119*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB4093119 is Installed"
                                }
                            Else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB4093119 is not Installed"
                                }
                        }
                    if ($osBuild -eq "1809")
                        {
                            if ($hotfixList -like "*KB5005625*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB5005625 is Installed"
                                }
                            else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB5005625 is not Installed"
                                }
                        }

                    if ($osBuild -ge "1903")
                        {
                            if ($hotfixList -like "*KB5005611*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB5005611 is Installed"
                                }
                            else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB5005611 is not Installed"
                                }                                
                        }

                    if ($osBuild -ge "1909")
                        {
                            if ($hotfixList -like "*KB5005624*")
                                {
                                    Add-Content -Path $hotfixFile -Value "KB5005624 is Installed"
                                }
                            else
                                {
                                    Add-Content -Path $hotfixFile -Value "KB5005624 is not Installed"
                                }
                        }
                                                
Set-Content $supportedCipherSuites -Value "TLS_AES_256_GCM_SHA384 - TLS 1.3 Must be enabled to use this cipher suite
TLS_CHACHA20_POLY1305_SHA256 - TLS 1.3 Must be enabled to use this cipher suite
TLS_AES_128_GCM_SHA256 - TLS 1.3 Must be enabled to use this cipher suite
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CCM_8
TLS_DHE_RSA_WITH_AES_256_CCM
TLS_DHE_RSA_WITH_AES_128_CCM_8
TLS_DHE_RSA_WITH_AES_128_CCM
TLS_RSA_WITH_AES_256_CCM_8
TLS_RSA_WITH_AES_256_CCM
TLS_RSA_WITH_AES_128_CCM_8
TLS_RSA_WITH_AES_128_CCM
TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"

##Compare Supported Manager Cipher Suites and Cipher Suites loaded by the system##
                if ($commonCiphersExist)
                    {
                        Remove-Item -Path $commonCipherSuites
                    }
              
                Get-Content $supportedCipherSuites | ForEach-Object {
                        $supportedCipherSuites_Line = $_
                        Get-Content $systemCipherSuites | Where-Object {$_.Contains($supportedCipherSuites_Line)} | Out-File -FilePath $commonCipherSuites -Append
                            }
            }
                $win11Srv19Srv22 = {

                Write-Host "This is Windows 11, Server 2019 or Server 2022"

                $consoleUrl = Read-Host -Prompt 'Console URL (Example: https://myconsole.sentinelone.net)'
                try {
                        $testConnect = Invoke-RestMethod -Uri $consoleUrl
                        if ($testConnect -ne $null)
                            {
                                $testConnStatus = "Connection Test Result: Success"
                            }
                        else
                            {
                                $testConnStatus = "Connection Test Result: Fail"
                            }
                    }
                catch
                    {
                    }

                Write-Host $testConnStatus


Set-Content $supportedCipherSuites -Value "TLS_AES_256_GCM_SHA384 - TLS 1.3 Must be enabled to use this cipher suite
TLS_CHACHA20_POLY1305_SHA256 - TLS 1.3 Must be enabled to use this cipher suite
TLS_AES_128_GCM_SHA256 - TLS 1.3 Must be enabled to use this cipher suite
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CCM_8
TLS_DHE_RSA_WITH_AES_256_CCM
TLS_DHE_RSA_WITH_AES_128_CCM_8
TLS_DHE_RSA_WITH_AES_128_CCM
TLS_RSA_WITH_AES_256_CCM_8
TLS_RSA_WITH_AES_256_CCM
TLS_RSA_WITH_AES_128_CCM_8
TLS_RSA_WITH_AES_128_CCM
TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256"

##Compare Supported Manager Cipher Suites and Cipher Suites loaded by the system##
                if ($commonCiphersExist)
                    {
                        Remove-Item -Path $commonCipherSuites
                    }
              
                Get-Content $supportedCipherSuites | ForEach-Object {
                    $supportedCipherSuites_Line = $_
                    Get-Content $systemCipherSuites | Where-Object {$_.Contains($supportedCipherSuites_Line)} | Out-File -FilePath $commonCipherSuites -Append
                    }
                }

##Check if Windows Server 2012 R2 and if Required Updates are installed
                if ($osKeyValue -like "*Server 2012 R2*" -or $osKeyValue -like "*Windows 8.1*")
                    {
                        .$server2012R2        
                    }
##Check if Windows 10 and Windows Server 2016 Required Updates are installed

                if ($osKeyValue -like "*Windows 10*" -or $osKeyValue -like "*Server 2016*")
                    {
                        $wmiOSName = Get-ComputerInfo | Select-object -ExpandProperty osName
                        if ($wmiOSName -like "*Windows 11*")
                            {
                                .$win11Srv19Srv22
                            }
                        else
                            {
                                .$win10serv2016        
                            }
                    }


                ## How many Common Cipher Suites were found?
                $countCiphers = Get-Content -Path $commonCipherSuites | Measure-Object -Line
                $count = $countCiphers | Select-Object -ExpandProperty Lines

                Write-Host "Cipher Suite comparison complete `n
There were " $count "Cipher Suites loaded that are supported by the manager and Operating System. `n"
                Write-Host "Please review the CommonCipherSuites.csv file. `n
Make sure at least 1 of the Cipher Suites listed are at the top of the list in SystemCipherSuites.txt."

############################################################
######Determine whether Diffie-Helman is Enabled or Disabled and the configured Key Length
############################################################
                if ($dhCheck -ne 0)
                    {   
                        $dhStatus = "Enabled"
                    }
                else
                    {
                        $dhStatus = "Disabled"
                    }

##########################################################################
#########Output GPResult Report on OS which Powershell Supports the cmdlet
##########################################################################
                Write-Host "Running gpresult to check computer GPO Information"
                Invoke-command -ScriptBlock {gpresult.exe /scope computer /f /x $gpResultOutput}

# Load the XML content from the file
                $xmlFilePath = $gpResultOutput
                $xmlContent = Get-Content -Path $xmlFilePath

# Create an XML object from the content
                $xml  = [xml]$xmlContent

                $ns = New-Object System.Xml.XmlNamespaceManager($xml.NameTable)
                $ns.AddNamespace('default', 'http://www.microsoft.com/GroupPolicy/Settings/Base')
                $ns.AddNamespace('q4', 'http://www.microsoft.com/GroupPolicy/Settings/Registry')
                $ns.AddNamespace("types", "http://www.microsoft.com/GroupPolicy/Types")
                $ns.AddNamespace("ns", "http://www.microsoft.com/GroupPolicy/Rsop")

                $ahgpoCipherSuites = $xml.SelectSingleNode("//q4:Policy[q4:EditText[q4:Name='SSL Cipher Suites']]/q4:EditText/q4:Value", $ns).InnerText
#Write-Output "GPO CipherSuites: $ahgpoCipherSuites"
                $gpoIdentifier = $xml.SelectSingleNode("//q4:Policy[q4:EditText[q4:Name='SSL Cipher Suites']]/default:GPO/types:Identifier", $ns).InnerText
#Write-Output "GPO Identifier: $gpoIdentifier"

                if ($ahgpoCipherSuites -eq $null) 
                    { Write-Output "No Cipher Suites GPO"}
                else 
                    {
	                    Write-Output "GPO CipherSuites: $gpoCipherSuites"
	                    $gpoIdentifier = $xml.SelectSingleNode("//q4:Policy[q4:EditText[q4:Name='SSL Cipher Suites']]/default:GPO/types:Identifier", $ns).InnerText
	                    Write-Output "GPO Identifier: $gpoIdentifier"

                        If ($gpoIdentifier -ne "LocalGPO")
                            {
	                            Write-Output "This is a Domain GPO"
	                            # Extract GPO name and identifier
	                            $gpoName = $xml.SelectSingleNode("//ns:GPO[ns:Path[types:Identifier='$gpoIdentifier']]/ns:Name", $ns).InnerText
	

	                            # Output GPO name and identifier
	                            #Write-Output "GPO Name: $gpoName"
                            }
                        Else 
                            {
                                $gpoName = "This is a local GPO"
	                            #Write-Output "This is a local GPO"
                            }
                    }

###################################################################################################
########Test WMI Corruption by attempting to pull some of the data the agent pulls for registration
###################################################################################################
                $wmiComputerSystem = Get-CimInstance -ClassName Win32_ComputerSystem
                if ($wmiComputerSystem -eq $null)
                    {
                        Set-Content -Path $wmiLog -Value "There was an error pulling WMI Data. The repository may be corrupt"
                    }
                else
                    {
                        Set-Content -Path $wmiLog -Value $wmiComputerSystem
                    }
                $wmiOS = Get-CimInstance -ClassName Win32_OperatingSystem
                if ($wmiOS -eq $null)
                    {
                        Add-Content -Path $wmiLog -Value "There was an error pulling WMI Data. The repository may be corrupt"
                    }
                else
                    {
                        Add-Content -Path $wmiLog -Value $wmiOS
                    }
                $wmiProcessor = Get-CimInstance -ClassName Win32_Processor
                if ($wmiProcessor -eq $null)
                    {
                        Add-Content -Path $wmiLog -Value "There was an error pulling WMI Data. The repository may be corrupt"
                    }
                else
                    {
                        Add-Content -Path $wmiLog -Value $wmiProcessor
                    }

#############################################################
######## Build Out of Cipher Suite Check Utility Log CSCU.log
#############################################################
                $hostname = $env:computername
                $hotfixes4Log = Get-Content -Path $hotfixFile -ErrorAction SilentlyContinue

#Are Updates Required?
                if ($hotfixes4Log -ne $null)
                    {
                        $hotfixes4Log
                    }
                else
                    {
                        $hotfixes4Log = "There are no Windows Updates required by SentinelOne for this System"
                    }

#Determine the message based on count of cipher suites in common
                if ($count -eq 0)
                    {
                        $cipherMessage = "Because there are no Cipher Suites in common you must add at least 1 cipher suite listed in the SupportedCipherSuites.csv file to your $cipherSource"
                    }
                else
                    {
                        $cipherMessage = "Because there are Cipher Suites in common, make sure at least 1 cipher suite from the CommonCipherSuites.csv file is listed at the top of your $cipherSource"
                    }

#Is there an Active GPO applied?
                if ($sslCipherSuites -ne $null)
                    {
                        $gpresultMsg = "There is an Active GPO Policy applied to this system."
                    }
                else
                    {
      
                    }

################### csculog.log Text ##################
$logOutput = "Cipher Suite Check Utility Log $dateTime 
Hostname: $hostname
Operating System: $wmiOSName
$testConnStatus


-----------------------------------
Required Windows Update Status
---------------------------------------
$hotfixes4Log


-----------------------------------
Security Communication Requirements
---------------------------------------
Diffie-Hellman Status: $dhStatus
Cipher Suites Source: $cipherSource
$localSourceMsg

There are $count Cipher Suites listed that are supported by the manager and this Operating System.

$cipherMessage


-----------------------------------
WMI Data Query Results
---------------------------------------
$wmiComputerSystem
$wmiOS
$wmiProcessor


-----------------------------------
GPResult Data
---------------------------------------
$gpresultMsg

$gpoName

$ahgpoCipherSuites
"
}


###################################
##OS Supported by Legacy Plus Agent
###################################
if ($osKeyValue -like "*Server 2008 R2*" -or $osKeyValue -like "*Windows 7*")
    {
        .$legacyPlus
    }
    
###############################
##OS Supported by Current Agent
###############################

if ($osKeyValue -like "*Server 2012 R2*" -or $osKeyValue -like "*Windows 8.1*" -or $osKeyValue -like "*Windows 10*" -or $osKeyValue -like "*Server 2016*")
    {
        .$currentAgent    
    }


Set-Content -Path $cscuLog -Value $logOutput


Read-Host -Prompt "Please Review $cscuLog. `nYou can close PowerShell now." | Out-Null
